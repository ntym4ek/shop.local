<?php

/**
 * @file
 * Provides an example payment method for Drupal Commerce for testing and
 *   development.
 */


/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_payment_installment_commerce_payment_method_info()
{
  $payment_methods = array();

  $payment_methods['commerce_payment_installment'] = array(
    'title' => t('Installment'),
    'description' => t('Provides Installment payment method'),
    // Название способа оплаты для отображения в форме чекаута. Может содержать html.
    // Опционально.
    'display_title' => t('Installment'),
    // Состояние способа оплаты при включении модуля: TRUE — включён, FALSE — выключен
    // (по умолчанию). Опционально.
    'active' => TRUE,
    // Сможет ли администратор самостоятельно добавить этот способ оплаты для
    // завершённого заказа. Опционально. По умолчанию TRUE.
    'terminal' => TRUE,
    // Нужно ли покупателю покидать пределы сайта при оплате заказа этим способом.
    // Опционально. По умолчанию FALSE.
    'offsite' => FALSE,
    // Автоматический редирект на сторонний сайт при оплате заказа этим способом.
    // Опционально. По умолчанию FALSE.
    'offsite_autoredirect' => FALSE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: submit form.
 */
function commerce_payment_installment_submit_form($payment_method, $pane_values, $checkout_pane, $order)
{
  $form = [];

  return $form;
}

/**
 * Payment method callback: submit form validation.
 */
function commerce_payment_installment_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array())
{
}

/**
 * Payment method callback: submit form submission.
 */
function commerce_payment_installment_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge)
{
  $order->data['commerce_payment_installment'] = $pane_values;

  // Создаём транзакцию
  $transaction = commerce_payment_transaction_new('commerce_payment_installment', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  $transaction->message = t('The payment is pending.');
  commerce_payment_transaction_save($transaction);
}

